import { PartialType } from '@nestjs/mapped-types'
import { CreateUserDto } from './create-user.dto'

import {
  IsEmpty,
  IsNotEmpty,
  IsNumberString,
  IsPhoneNumber,
  MaxLength,
} from 'class-validator'
import { SQLDateGenerator } from 'src/utils/SQLDateGenerator'
import { Transform } from 'class-transformer'
import { Bcrypt } from 'src/utils/Bcrypt'

export class UpdateUserDto extends PartialType(CreateUserDto) {
  @IsNotEmpty({
    message: `First Name can't be empty`,
  })
  @MaxLength(30, {
    message: `First Name can't exceed 30 characters`,
  })
  first_name: string

  @IsNotEmpty({
    message: `Last Name can't be empty`,
  })
  @MaxLength(30, {
    message: `Last Name can't exceed 30 characters`,
  })
  last_name: string

  @IsNotEmpty({
    message: 'Phone Number is Empty',
  })
  @IsPhoneNumber('PH', { message: 'Invalid Phone Number' })
  phone_number: string

  @IsEmpty({
    message: `Can't update autogenerated fields`,
  })
  updated_at: never

  @IsEmpty({
    message: `Can't update autogenerated fields`,
  })
  created_at: never

  @IsEmpty({
    message: `Can't update autogenerated fields`,
  })
  active: boolean

  // @Transform((params) => {
  //   const { value } = params
  //   console.log('value', value)
  //   console.log(params)

  //   return Bcrypt().generatePassword(value)
  // })
  password: string
}
